spring:
  # ShardingSphere的配置项
  shardingsphere:
    props:
      # 打印SQl
      sql-show: true
    # 内存模式
    mode:
      type: Memory
    # 真实数据源配置
    datasource:
      names: ds2023,ds2024
      ds2023:
        driver-class-name: org.postgresql.Driver
        url: jdbc:postgresql://10.0.10.123:5432/postgres?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
        type: com.zaxxer.hikari.HikariDataSource
        username: user
        password: 1q2w3e!Q@W#E
      ds2024:
        driver-class-name: org.postgresql.Driver
        url: jdbc:postgresql://10.0.10.123:5432/test?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
        type: com.zaxxer.hikari.HikariDataSource
        username: user
        password: 1q2w3e!Q@W#E
    # 分片配置
    rules:
      # 分片配置
      sharding:
        # 分表配置
        tables:
          # 逻辑表名
          t_user:
            # 真实表名，这里需要加上写入数据库的名称
            # 使用读写分离数据源的逻辑库名称
            actual-data-nodes: ds202$->{3..4}.t_user$->{0..1}
            # 分布式序列策略配置
            key-generate-strategy:
              # 分布式序列列名称
              column: id
              # 分布式序列算法名称
              key-generator-name: key-gen-snowflake
            # 分表算法
            table-strategy:
              # 分表算法类型
              standard:
                sharding-column: id
                # 分片算法名称
                sharding-algorithm-name: alg-standard-table_crc8
          t_order:
            # 真实表名，这里需要加上写入数据库的名称
            # 使用读写分离数据源的逻辑库名称
            actual-data-nodes: ds202$->{3..4}.t_order$->{0..2}
            # 分布式序列策略配置
            key-generate-strategy:
              # 分布式序列列名称
              column: id
              # 分布式序列算法名称
              key-generator-name: key-gen-snowflake
            # 分表算法
            table-strategy:
              # 分表算法类型
              standard:
                sharding-column: user_id
                # 分片算法名称
                sharding-algorithm-name: alg-standard-table_crc8
          t_log_info:
            # 真实表名，这里需要加上写入数据库的名称
            # 使用读写分离数据源的逻辑库名称
            actual-data-nodes: ds202$->{3..4}.ds.t_log_info_0$->{1..9}_0$->{0..7},ds202$->{3..4}.t_log_info_$->{10..12}_0$->{0..7}
            database-strategy:
              standard:
                sharding-column: id
                sharding-algorithm-name: alg-database_crc8
            # 分表策略
            table-strategy:
              # 分表算法类型
              complex:
                sharding-columns: id ,create_time
                # 分片算法名称
                sharding-algorithm-name: alg-complex-table_crc8

        # 分布式主键算法
        key-generators:
          # 雪花算法
          key-gen-snowflake:
            type: SNOWFLAKE
            props:
              # 工作机器ID，确保每个实例的唯一性
              worker-id: 123
              # 最大容忍时钟回拨时间差，单位毫秒
              max-tolerate-time-difference-milliseconds: 5
        # 分片算法类型
        sharding-algorithms:
          # 分库算法
          alg-database_crc8:
            type: CRC8_STANDARD_DATABASE_TYPE
            props:
              strategy: STANDARD
              algorithm-class-name: cc.taketo.algorithm.CRC8DatabaseShardingAlgorithm
          # 分表算法
          alg-standard-table_crc8:
            type: CRC8_STANDARD_TABLE_TYPE
            props:
              strategy: STANDARD
              algorithm-class-name: cc.taketo.algorithm.CRC8StandardTableShardingAlgorithm
          alg-complex-table_crc8:
            type: CRC8_COMPLEX_TABLE_TYPE
            props:
              strategy: COMPLEX
              algorithm-class-name: cc.taketo.algorithm.CRC8ComplexTableShardingAlgorithm

mybatis-plus:
  # 扫描Mapper接口对应的XML文件
  mapper-locations: classpath:mapper/*.xml
  configuration:
    # 日志
    #log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    # 命名自动驼峰转换
    map-underscore-to-camel-case: true
    #  global-config:
    #    db-config:
    # 主键类型，auto：数据库id自增
#      id-type: assign_id