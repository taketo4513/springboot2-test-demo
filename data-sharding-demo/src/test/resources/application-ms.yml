spring:
  # ShardingSphere的配置项
  shardingsphere:
    props:
      # 打印SQl
      sql-show: true
    # 内存模式
    mode:
      type: Memory
    # 真实数据源配置
    datasource:
      names: master,slave1,slave2
      master:
        driver-class-name: org.postgresql.Driver
        url: jdbc:postgresql://10.0.10.123:5430/postgres?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
        type: com.zaxxer.hikari.HikariDataSource
        username: user
        password: 1q2w3e!Q@W#E
      slave1:
        driver-class-name: org.postgresql.Driver
        url: jdbc:postgresql://10.0.10.123:5431/postgres?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
        type: com.zaxxer.hikari.HikariDataSource
        username: user
        password: 1q2w3e!Q@W#E
      slave2:
        driver-class-name: org.postgresql.Driver
        url: jdbc:postgresql://10.0.10.123:5432/postgres?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
        type: com.zaxxer.hikari.HikariDataSource
        username: user
        password: 1q2w3e!Q@W#E
    # ShardingSphere的属性配置
    rules:
      # 读写分离类型，如: Static，Dynamic
      readwrite-splitting:
        data-sources:
          # 自定义数据源名称
          myds:
            type: Static
            props:
              # 写数据源名称
              write-data-source-name: master
              # 读数据源名称，多个从数据源用逗号分隔
              read-data-source-names: slave1,slave2
              # 负载均衡算法名称：alg_round,alg_random,alg_weight
              load-balancer-name: alg_round
        # 负载均衡算法类型
        load-balancers:
          # 轮询算法
          alg_round:
            type: ROUND_ROBIN
          # 随机算法
          alg_random:
            type: RANDOM
          # 权重算法
          alg_weight:
            type: WEIGHT
            props:
              slave1: 1
              slave2: 2
      # 分片配置
      sharding:
        # 分表配置
        tables:
          # 逻辑表名
          t_user:
            # 真实表名，这里需要加上写入数据库的名称
            # 使用读写分离数据源的逻辑库名称
            actual-data-nodes: myds.t_user_0$->{0..3}
            # 分布式序列策略配置
            key-generate-strategy:
              # 分布式序列列名称
              column: id
              # 分布式序列算法名称
              key-generator-name: alg_snowflake
            # 分表算法
            table-strategy:
              # 分表算法类型
              standard:
                sharding-column: id
                # 分片算法名称
                sharding-algorithm-name: alg_inline_userid
          # 逻辑表名
          t_order:
            # 真实表名，这里需要加上写入数据库的名称
            # 使用读写分离数据源的逻辑库名称
            actual-data-nodes: myds.t_order_0$->{0..3}
            # 分布式序列策略配置
            key-generate-strategy:
              # 分布式序列列名称
              column: id
              # 分布式序列算法名称
              key-generator-name: alg_snowflake
            # 分表算法
            table-strategy:
              # 分表算法类型
              standard:
                sharding-column: user_id
                # 分片算法名称
                sharding-algorithm-name: alg_hash_mod_order
        # 分布式序列配置
        key-generators:
          # 雪花算法类型
          alg_snowflake:
            type: SNOWFLAKE
        # 分片算法类型
        sharding-algorithms:
          # 行分片算法
          alg_inline_userid:
            type: INLINE
            props:
              algorithm-expression: t_user$->{id % 4}
          # 取模分片算法
          alg_mod:
            type: MOD
            props:
              sharding-count: 3
          # 哈希取模分片算法
          alg_hash_mod_order:
            type: HASH_MOD
            props:
              sharding-count: 3

  # Redis 配置
  redis:
    # Redis数据库索引（默认为0）
    database: 0
    # Redis服务器地址
    host: 10.0.10.123
    # Redis服务器连接端口
    port: 6379
    # Redis服务器连接密码（默认为空）
    password: 1q2w3e!Q@W#E
    lettuce:
      pool:
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: 8
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1
        # 连接池中的最大空闲连接
        max-idle: 8
        # 连接池中的最小空闲连接
        min-idle: 0
        # 空闲对象逐出器线程的运行间隔时间
        time-between-eviction-runs: 10s
    # 连接超时时间（毫秒）
    timeout: 1200
mybatis-plus:
  # 扫描Mapper接口对应的XML文件
  mapper-locations: classpath:mapper/*.xml
  configuration:
    # 日志
    #log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    # 命名自动驼峰转换
    map-underscore-to-camel-case: true
    #  global-config:
    #    db-config:
    # 主键类型，auto：数据库id自增
#      id-type: assign_id